From 55a1fda2f35effd9641efbeaea96a6fb1e1a7018 Mon Sep 17 00:00:00 2001
From: Haihua Hu <jared.hu@nxp.com>
Date: Tue, 13 Dec 2016 13:27:15 +0800
Subject: [PATCH 2/3] Change ion configure method

1. Check ion headfile to decide whether to enable USE_ION
2. Add paddr query support in gstimxcommon
3. If ion open failed, fall back to not use other allocator

Signed-off-by: Haihua Hu <jared.hu@nxp.com>
---
 configure.ac                                       |  7 ++
 libs/Makefile.am                                   |  4 +-
 libs/device-2d/imx_2d_device_g2d.c                 | 32 ++++-----
 libs/gstimxcommon.c                                | 78 ++++++++++++++++++++++
 libs/gstimxcommon.h                                |  3 +
 .../imxoverlaycompositionmeta.c                    | 13 ++--
 plugins/compositor/Makefile.am                     |  4 +-
 plugins/compositor/gstimxcompositor.c              | 12 ++--
 plugins/compositor/gstimxcompositorpad.c           | 12 ++--
 plugins/overlay_sink/Makefile.am                   |  6 +-
 plugins/overlay_sink/gstosink.c                    |  9 +--
 plugins/videoconvert/Makefile.am                   |  4 +-
 plugins/videoconvert/gstimxvideoconvert.c          | 12 ++--
 13 files changed, 146 insertions(+), 50 deletions(-)

diff --git a/configure.ac b/configure.ac
index 50799a6..c325b17 100755
--- a/configure.ac
+++ b/configure.ac
@@ -212,6 +212,13 @@ AC_SUBST(GST_BAD_VIDEO_CFLAGS)
 AC_SUBST(GST_BAD_VIDEO_LIBS)
 fi
 
+dnl check ion allocator headfile
+old_CFLAGS=$CFLAGS
+CFLAGS="$CFLAGS `$PKG_CONFIG --cflags gstreamer-allocators-1.0`"
+AC_CHECK_HEADERS([linux/ion.h gst/allocators/gstionmemory.h], HAVE_ION="yes", HAVE_ION="no")
+AM_CONDITIONAL(USE_ION, test "x$HAVE_ION" = "xyes")
+CFLAGS=$old_CFLAGS
+
 AC_CHECK_HEADERS([vpu_lib.h], [HAVE_VPU_LIB=yes], [HAVE_VPU_LIB=no])
 if test "x$HAVE_VPU_LIB" = "xyes"; then
     VPU_LIBS=`$PKG_CONFIG --libs libfslvpuwrap 2>/dev/null`
diff --git a/libs/Makefile.am b/libs/Makefile.am
index f1edd42..9a3b183 100755
--- a/libs/Makefile.am
+++ b/libs/Makefile.am
@@ -31,8 +31,8 @@ noinst_HEADERS = allocator/gstphymemmeta.h \
     overlaycompositionmeta/imxoverlaycompositionmeta.h \
     video-overlay/gstimxvideooverlay.h
 
-if PLATFORM_IS_MX8
-libgstfsl_@GST_API_VERSION@_la_CFLAGS += -DUSE_DMA_FD
+if USE_ION
+libgstfsl_@GST_API_VERSION@_la_CFLAGS += -DUSE_ION
 endif
 
 if USE_X11
diff --git a/libs/device-2d/imx_2d_device_g2d.c b/libs/device-2d/imx_2d_device_g2d.c
index 29b8aa5..e75bf42 100755
--- a/libs/device-2d/imx_2d_device_g2d.c
+++ b/libs/device-2d/imx_2d_device_g2d.c
@@ -384,7 +384,6 @@ static gint imx_g2d_blit(Imx2DDevice *device,
 {
   gint ret = 0;
   void *g2d_handle = NULL;
-  struct g2d_buf *pbuf = NULL;
 
   if (!device || !device->priv || !dst || !src || !dst->mem || !src->mem)
     return -1;
@@ -397,39 +396,37 @@ static gint imx_g2d_blit(Imx2DDevice *device,
 
   Imx2DDeviceG2d *g2d = (Imx2DDeviceG2d *) (device->priv);
 
-#ifdef USE_DMA_FD
   GST_DEBUG ("src paddr fd vaddr: %p %d %p dst paddr fd vaddr: %p %d %p",
       src->mem->paddr, src->fd[0], src->mem->vaddr, dst->mem->paddr,
       dst->fd[0], dst->mem->vaddr);
+
+  unsigned long paddr = 0;
   if (!src->mem->paddr) {
     if (src->fd[0] >= 0) {
-      pbuf = g2d_buf_from_fd (src->fd[0]);
+      paddr = phy_addr_from_fd (src->fd[0]);
     } else if (src->mem->vaddr) {
-      pbuf = g2d_buf_from_virt_addr (src->mem->vaddr, PAGE_ALIGN(src->mem->size));
+      paddr = phy_addr_from_vaddr (src->mem->vaddr, PAGE_ALIGN(src->mem->size));
     } else {
       GST_ERROR ("Invalid parameters.");
       return -1;
     }
-    if (pbuf) {
-      src->mem->paddr = pbuf->buf_paddr;
-      g2d_free(pbuf);
+    if (paddr) {
+      src->mem->paddr = paddr;
     } else {
       GST_ERROR ("Can't get physical address.");
       return -1;
     }
   }
   if (!dst->mem->paddr) {
-    pbuf = g2d_buf_from_fd (dst->fd[0]);
-    if (pbuf) {
-      dst->mem->paddr = pbuf->buf_paddr;
-      g2d_free(pbuf);
+    paddr = phy_addr_from_fd (dst->fd[0]);
+    if (paddr) {
+      dst->mem->paddr = paddr;
     } else {
       GST_ERROR ("Can't get physical address.");
       return -1;
     }
   }
   GST_DEBUG ("src paddr: %p dst paddr: %p", src->mem->paddr, dst->mem->paddr);
-#endif
 
   // Set input
   g2d->src.global_alpha = src->alpha;
@@ -648,7 +645,6 @@ static gint imx_g2d_fill_color(Imx2DDevice *device, Imx2DFrame *dst,
 {
   void *g2d_handle = NULL;
   gint ret = 0;
-  struct g2d_buf *pbuf = NULL;
 
   if (!device || !device->priv || !dst || !dst->mem)
     return -1;
@@ -660,20 +656,18 @@ static gint imx_g2d_fill_color(Imx2DDevice *device, Imx2DFrame *dst,
 
   Imx2DDeviceG2d *g2d = (Imx2DDeviceG2d *) (device->priv);
 
-#ifdef USE_DMA_FD
   GST_DEBUG ("dst paddr: %p fd: %d", dst->mem->paddr, dst->fd[0]);
+  unsigned long paddr = 0;
   if (!dst->mem->paddr) {
-    pbuf = g2d_buf_from_fd (dst->fd[0]);
-    if (pbuf) {
-      dst->mem->paddr = pbuf->buf_paddr;
-      g2d_free(pbuf);
+    paddr = phy_addr_from_fd (dst->fd[0]);
+    if (paddr) {
+      dst->mem->paddr = paddr;
     } else {
       GST_ERROR ("Can't get physical address.");
       return -1;
     }
   }
   GST_DEBUG ("dst paddr: %p", dst->mem->paddr);
-#endif
 
   g2d->dst.clrcolor = RGBA8888;
   g2d->dst.planes[0] = (gint)(dst->mem->paddr);
diff --git a/libs/gstimxcommon.c b/libs/gstimxcommon.c
index b5c0962..7742e08 100644
--- a/libs/gstimxcommon.c
+++ b/libs/gstimxcommon.c
@@ -18,6 +18,12 @@
  */
 
 #include "gstimxcommon.h"
+#include <fcntl.h>
+#include <sys/ioctl.h>
+#include <sys/mman.h>
+#ifdef USE_ION
+#include <linux/ion.h>
+#endif
 
 /*=============================================================================
 FUNCTION:               get_chipname
@@ -224,3 +230,75 @@ gboolean check_feature(CHIP_CODE chip_name, CHIP_FEATURE feature)
   }
   return ret;
 }
+
+const char *dev_ion = "/dev/ion";
+
+unsigned long phy_addr_from_fd(int dmafd)
+{
+#ifdef USE_ION
+  int ret, fd;
+
+  if (dmafd < 0)
+    return NULL;
+  
+  fd = open(dev_ion, O_RDWR);
+  if(fd < 0) {
+    return NULL;
+  }
+
+  struct ion_phys_dma_data data = {
+    .phys = 0,
+    .size = 0,
+    .dmafd = dmafd,
+  };
+
+  struct ion_custom_data custom = {
+    .cmd = ION_IOC_PHYS_DMA,
+    .arg = (unsigned long)&data,
+  };
+
+  ret = ioctl(fd, ION_IOC_CUSTOM, &custom);
+  close(fd);
+  if (ret < 0)
+    return NULL;
+
+  return data.phys;
+#else
+  return NULL;
+#endif
+}
+
+unsigned long phy_addr_from_vaddr(void *vaddr, int size)
+{
+#ifdef USE_ION
+  int ret, fd;
+
+  if (!vaddr)
+    return NULL;
+  
+  fd = open(dev_ion, O_RDWR);
+  if(fd < 0) {
+    return NULL;
+  }
+
+  struct ion_phys_virt_data data = {
+    .virt = (unsigned long)vaddr,
+    .phys = 0,
+    .size = size,
+  };
+
+  struct ion_custom_data custom = {
+    .cmd = ION_IOC_PHYS_VIRT,
+    .arg = (unsigned long)&data,
+  };
+
+  ret = ioctl(fd, ION_IOC_CUSTOM, &custom);
+  close(fd);
+  if (ret < 0)
+    return NULL;
+
+  return data.phys;
+#else
+  return NULL;
+#endif
+}
diff --git a/libs/gstimxcommon.h b/libs/gstimxcommon.h
index 49c26b1..0fae8f0 100755
--- a/libs/gstimxcommon.h
+++ b/libs/gstimxcommon.h
@@ -108,4 +108,7 @@ gboolean check_feature(CHIP_CODE chip_name, CHIP_FEATURE feature);
 #define HAS_VPU() check_feature(imx_chip_code(), VPU)
 #define HAS_DPU() check_feature(imx_chip_code(), DPU)
 
+unsigned long phy_addr_from_fd(int dmafd);
+unsigned long phy_addr_from_vaddr(void *vaddr, int size);
+
 #endif
diff --git a/libs/overlaycompositionmeta/imxoverlaycompositionmeta.c b/libs/overlaycompositionmeta/imxoverlaycompositionmeta.c
index 1fc1e63..d615f8c 100755
--- a/libs/overlaycompositionmeta/imxoverlaycompositionmeta.c
+++ b/libs/overlaycompositionmeta/imxoverlaycompositionmeta.c
@@ -29,7 +29,7 @@
 #include <gst/allocators/gstdmabuf.h>
 #include "imxoverlaycompositionmeta.h"
 #include "../allocator/gstphymemmeta.h"
-#ifdef USE_DMA_FD
+#ifdef USE_ION
 #include <gst/allocators/gstionmemory.h>
 #endif
 
@@ -448,13 +448,16 @@ gint imx_video_overlay_composition_composite(
 
       if (t_fmt != vmeta->format || !gst_buffer_is_phymem(ovbuf)) {
         // need copy buffer
-        if (!vcomp->allocator)
-#ifdef USE_DMA_FD
+        if (!vcomp->allocator) {
+#ifdef USE_ION
           vcomp->allocator = gst_ion_allocator_obtain ();
-#else
+#endif
+        }
+
+        /* obtain ion allocator will fail on imx6 and 7D */
+        if (!vcomp->allocator)
           vcomp->allocator =
                  gst_imx_2d_device_allocator_new((gpointer)(vcomp->device));
-#endif
 
         if (!vcomp->allocator) {
           GST_WARNING("create allocator for overlay buffer failed\n");
diff --git a/plugins/compositor/Makefile.am b/plugins/compositor/Makefile.am
index b2cfe8d..c7ecf7b 100755
--- a/plugins/compositor/Makefile.am
+++ b/plugins/compositor/Makefile.am
@@ -11,8 +11,8 @@ libgstimxcompositor_la_CFLAGS = $(GST_PLUGINS_BASE_CFLAGS) \
 				 -I$(top_srcdir)/libs/device-2d \
 				 -I$(top_srcdir)/libs/overlaycompositionmeta
 				 
-if PLATFORM_IS_MX8
-libgstimxcompositor_la_CFLAGS += -DUSE_DMA_FD 
+if USE_ION
+libgstimxcompositor_la_CFLAGS += -DUSE_ION
 endif
 
 libgstimxcompositor_la_LIBADD = $(GST_PLUGINS_BASE_LIBS) \
diff --git a/plugins/compositor/gstimxcompositor.c b/plugins/compositor/gstimxcompositor.c
index d762dfc..ffe77f7 100755
--- a/plugins/compositor/gstimxcompositor.c
+++ b/plugins/compositor/gstimxcompositor.c
@@ -121,7 +121,7 @@
 #include <gst/allocators/gstdmabuf.h>
 #include <gst/allocators/gstallocatorphymem.h>
 #include "allocator/gstphymemmeta.h"
-#ifdef USE_DMA_FD
+#ifdef USE_ION
 #include <gst/allocators/gstionmemory.h>
 #endif
 #include "gstimxcompositor.h"
@@ -305,13 +305,15 @@ gst_imxcompositor_create_bufferpool(GstImxCompositor *imxcomp,
   GstStructure *config;
   pool = gst_video_buffer_pool_new ();
   if (pool) {
-    if (!imxcomp->allocator)
-#ifdef USE_DMA_FD
+    if (!imxcomp->allocator) {
+#ifdef USE_ION
       imxcomp->allocator = gst_ion_allocator_obtain ();
-#else
+#endif
+    }
+
+    if (!imxcomp->allocator)
       imxcomp->allocator =
           gst_imx_2d_device_allocator_new((gpointer)(imxcomp->device));
-#endif
 
     if (!imxcomp->allocator) {
       GST_ERROR ("new imx compositor allocator failed.");
diff --git a/plugins/compositor/gstimxcompositorpad.c b/plugins/compositor/gstimxcompositorpad.c
index f541309..3a48edd 100755
--- a/plugins/compositor/gstimxcompositorpad.c
+++ b/plugins/compositor/gstimxcompositorpad.c
@@ -24,7 +24,7 @@
 #include <string.h>
 #include "allocator/gstphymemmeta.h"
 #include <gst/allocators/gstdmabuf.h>
-#ifdef USE_DMA_FD
+#ifdef USE_ION
 #include <gst/allocators/gstionmemory.h>
 #endif
 #include "gstimxcompositorpad.h"
@@ -489,13 +489,15 @@ gst_imxcompositor_pad_prepare_frame (GstVideoAggregatorPad * pad,
     gst_video_info_from_caps(&info, caps); //update the size info
     gst_caps_unref(caps);
 
-    if (!imxcomp->allocator)
-#ifdef USE_DMA_FD
+    if (!imxcomp->allocator) {
+#ifdef USE_ION
       imxcomp->allocator = gst_ion_allocator_obtain ();
-#else
+#endif
+    }
+
+    if (!imxcomp->allocator)
       imxcomp->allocator =
           gst_imx_2d_device_allocator_new((gpointer)(imxcomp->device));
-#endif
 
     if (!cpad->sink_tmp_buf) {
       cpad->sink_tmp_buf = gst_buffer_new_allocate(imxcomp->allocator,
diff --git a/plugins/overlay_sink/Makefile.am b/plugins/overlay_sink/Makefile.am
index 6936e19..32e5698 100755
--- a/plugins/overlay_sink/Makefile.am
+++ b/plugins/overlay_sink/Makefile.am
@@ -27,7 +27,11 @@ libgstoverlaysinkplugins_la_CFLAGS = $(GST_PLUGINS_BASE_CFLAGS) \
          -I$(top_srcdir)/libs/video-overlay
 
 if PLATFORM_IS_MX8
-libgstoverlaysinkplugins_la_CFLAGS += -DUSE_DMA_FD -DUSE_FB_API
+libgstoverlaysinkplugins_la_CFLAGS += -DUSE_FB_API
+endif
+
+if USE_ION
+libgstoverlaysinkplugins_la_CFLAGS += -DUSE_ION
 endif
 
 libgstoverlaysinkplugins_la_LIBADD = $(GST_PLUGINS_BASE_LIBS) \
diff --git a/plugins/overlay_sink/gstosink.c b/plugins/overlay_sink/gstosink.c
index 5180c0c..59f034c 100755
--- a/plugins/overlay_sink/gstosink.c
+++ b/plugins/overlay_sink/gstosink.c
@@ -26,7 +26,7 @@
 #include "gstosink.h"
 #include "osink_object.h"
 #include "gstosinkallocator.h"
-#ifdef USE_DMA_FD
+#ifdef USE_ION
 #include <gst/allocators/gstionmemory.h>
 #endif
 #include "allocator/gstphymemmeta.h"
@@ -413,12 +413,13 @@ gst_overlay_sink_setup_buffer_pool (GstOverlaySink *sink, GstCaps *caps)
   GST_DEBUG_OBJECT (sink, "create buffer pool(%p).", sink->pool);
 
   if (!sink->allocator) {
-#ifdef USE_DMA_FD
+#ifdef USE_ION
     sink->allocator = gst_ion_allocator_obtain ();
-#else
-    sink->allocator = gst_osink_allocator_new (sink->osink_obj);
 #endif
     if (!sink->allocator) {
+      sink->allocator = gst_osink_allocator_new (sink->osink_obj);
+    }
+    if (!sink->allocator) {
       GST_ERROR_OBJECT (sink, "New osink allocator failed.\n");
       return -1;
     }
diff --git a/plugins/videoconvert/Makefile.am b/plugins/videoconvert/Makefile.am
index 61f7c0d..ddc88f1 100755
--- a/plugins/videoconvert/Makefile.am
+++ b/plugins/videoconvert/Makefile.am
@@ -10,8 +10,8 @@ libgstimxvideoconvert_la_CFLAGS = $(GST_PLUGINS_BASE_CFLAGS) \
 				 -I$(top_srcdir)/libs/device-2d \
 				 -I$(top_srcdir)/libs/overlaycompositionmeta
 
-if PLATFORM_IS_MX8
-libgstimxvideoconvert_la_CFLAGS += -DUSE_DMA_FD 
+if USE_ION
+libgstimxvideoconvert_la_CFLAGS += -DUSE_ION
 endif
 
 libgstimxvideoconvert_la_LIBADD = $(GST_PLUGINS_BASE_LIBS) \
diff --git a/plugins/videoconvert/gstimxvideoconvert.c b/plugins/videoconvert/gstimxvideoconvert.c
index 5869023..6a00d3e 100755
--- a/plugins/videoconvert/gstimxvideoconvert.c
+++ b/plugins/videoconvert/gstimxvideoconvert.c
@@ -24,7 +24,7 @@
 #include <gst/video/video.h>
 #include <gst/allocators/gstdmabuf.h>
 #include <gst/allocators/gstallocatorphymem.h>
-#ifdef USE_DMA_FD
+#ifdef USE_ION
 #include <gst/allocators/gstionmemory.h>
 #endif
 #include "gstphymemmeta.h"
@@ -949,13 +949,15 @@ gst_imx_video_convert_create_bufferpool(GstImxVideoConvert *imxvct,
 
   pool = gst_video_buffer_pool_new ();
   if (pool) {
-    if (!imxvct->allocator)
-#ifdef USE_DMA_FD
+    if (!imxvct->allocator) {
+#ifdef USE_ION
       imxvct->allocator = gst_ion_allocator_obtain ();
-#else
+#endif
+    }
+
+    if (!imxvct->allocator)
       imxvct->allocator =
           gst_imx_2d_device_allocator_new((gpointer)(imxvct->device));
-#endif
 
     if (!imxvct->allocator) {
       GST_ERROR ("new imx video convert allocator failed.");
-- 
1.9.1

